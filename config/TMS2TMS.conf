# This is the application.conf file that you are meant to modify during this tutorial.
# In the beginning, it has the same contents as application.conf.part-1-solution so that you can test if your local environemnt is setup correctly.

global {
  spark-options {
    "spark.hadoop.javax.jdo.option.ConnectionURL" = "jdbc:derby://metastore:1527/db;create=true"
    "spark.hadoop.javax.jdo.option.ConnectionDriverName" = "org.apache.derby.jdbc.ClientDriver"
    "spark.hadoop.javax.jdo.option.ConnectionUserName" = "sa"
    "spark.hadoop.javax.jdo.option.ConnectionPassword" = "1234"
    "spark.sql.shuffle.partitions" = 16
    "spark.driver.memory" = "10g"
    "spark.driver.extraJavaOptions" = "-XX:+PrintGCDetails -XX:+PrintGCTimeStamps"
#    "spark.executor.extraJavaOptions" = "-Xmx=5g" ## not allowed, need to use executor.memory
  }
}

dataObjects {
  ### Tarif data
  ext-tarif-init {
    type = XmlFileDataObject
    #schema = "xsdFile#TMS_TMS2TMS_Tariff_2000_corrected.xsd;TMSData" # using this with "tariffNode" in the xml parser rowTag, we get issues with inconsitencies in parsed "tariffNode" from modified and deleted section
    #path = "402_TMS_TMS2TMS_Tariff_1300.xsd_FULL_202205081904.xml"
    path = "TMS2TMS_initSample.xml"
    rowTag = "TMSData"
    filenameColumn = "importFile"
    xmlOptions = {
      samplingRatio = 0.05
    }
  }

  ext-tarif-update {
    type = XmlFileDataObject
    # TODO so far using schema prevents reading arrays, thus we get only a single element per section. This schould get fixed
    #schema = "xsdFile#TMS_TMS2TMS_Tariff_2000_corrected.xsd;TMSData/update/tariffNodes/modified/tariffNode" # using this with "tariffNode" in the xml parser rowTag, we get issues with inconsitencies in parsed "tariffNode" from modified and deleted section
    #schema = "xsdFile#TMS_TMS2TMS_Tariff_2000_corrected.xsd;TMSData"
    path = "402_TMS_TMS2TMS_Tariff_2000.xsd_UPDATE_202205081904.xml"
    rowTag = "TMSData"
    filenameColumn = "importFile"
  }

  stg-tarif-init {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "stg_tarif_init"
      #primaryKey = [update.tariffNodes.modified.tariffNode]
    }
  }

  stg-tarif-mod {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "stg_tarif_mod"
      primaryKey = [_businessDescriptor, _validFrom, _validTo]
    }
  }

  stg-tarif-del {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "stg_tarif_del"
      #primaryKey = [update.tariffNodes.modified.tariffNode]
    }
  }

#TODO delete, this is just for BA reasons
  raw-tarif-update {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "raw_tarif_update"
      #primaryKey = [update.tariffNodes.modified.tariffNode]
    }
  }

  ### CUSTOM ATTRIBUTES
  ext-ca {
    type = XmlFileDataObject
    # TODO so far using schema prevents reading arrays, thus we get only a single element per section
    #schema = "xsdFile#TMS_TMS2TMS_Custom_Attributes_200_corected.xsd;TMSData"
    path = "402_TMS_TMS2TMS_Custom_Attributes_200.xsd_FULL_202205081904.xml"
    rowTag = "TMSData"
    filenameColumn = "importFile"
  }

  stg-ca-def {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "stg_customAttr_def"
    }
  }
  stg-ca {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "stg_customAttr"
    }
  }

  ### RULES
  ext-rules {
    type = XmlFileDataObject
    # TODO so far using schema prevents reading arrays, thus we get only a single element per section
    #schema = "xsdFile#TMS_TMS2TMS_Custom_Attributes_200_corected.xsd;TMSData"
    path = "402_TMS_TMS2TMS_Rule_1300.xsd_FULL_202205081904.xml"
    rowTag = "TMSData"
    filenameColumn = "importFile"
  }
  stg-rules {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "stg_rules"
    }
  }
  ### raw data
  raw-ca {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "raw_ca"
    }
  }

  raw-rules {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "raw_rules"
    }
  }
  raw-tarif-init {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "raw_tarif_init"
    }
  }



}

actions {
  copyRaw {
    type = CopyAction
    inputId = ext-tarif-update
    outputId = raw-tarif-update
    metadata {
      feed = raw-tarif
    }
  }
  copyRawInit {
    type = CopyAction
    inputId = ext-tarif-init
    outputId = raw-tarif-init
    metadata {
      feed = raw-tarif-init
    }
  }

  copyRawCa {
    type = CopyAction
    inputId = ext-ca
    outputId = raw-ca
    metadata {
      feed = raw-ca
    }
  }
  copyRawRules {
    type = CopyAction
    inputId = ext-rules
    outputId = raw-rules
    metadata {
      feed = raw-rules
    }
  }


  download-TMS-init {
    type = CopyAction
    inputId = ext-tarif-init
    outputId = stg-tarif-init
    transformer = {
      scalaCode = """
        import org.apache.spark.sql.{DataFrame, SparkSession}
        import org.apache.spark.sql.functions.explode
        def selectTariffNodes(session: SparkSession, options: Map[String,String], df: DataFrame, dataObjectId: String) : DataFrame = {
          import session.implicits._
          df.withColumn("tarifNode", explode($"initialLoad.tariffNodes.tariffNode.tariffNodes.tariffNode.tariffNodes.tariffNode")).select("importFile","tarifNode.*")
        }
        selectTariffNodes _
      """
    }
    metadata {
      feed = TMS-download-tarif-init
    }
  }

  download-TMS-Tarif-update {
    type = CustomDataFrameAction
    inputIds = [ext-tarif-update]
    outputIds = [stg-tarif-mod, stg-tarif-del]
    transformers = [{
      type = ScalaCodeSparkDfsTransformer
      code = """
        import org.apache.spark.sql.{DataFrame, SparkSession}
        import org.apache.spark.sql.functions.explode
        (session: SparkSession, options: Map[String,String], dfs: Map[String,DataFrame]) => {
          import session.implicits._
          val df = dfs("ext-tarif-update")
          val df_mod = df.withColumn("modTarifNode", explode($"update.tariffNodes.modified.tariffNode")).select("importFile","modTarifNode.*")
          val df_del = df.withColumn("delTarifNode", explode($"update.tariffNodes.deleted.tariffNode")).select("importFile","delTarifNode.*")
          Map("stg-tarif-mod" -> df_mod, "stg-tarif-del" -> df_del)
        }
      """
    }]
    metadata {
      feed = TMS-download-tarif-update
    }
  }

  download-TMS-customAttributes {
    type = CustomDataFrameAction
    inputIds = [ext-ca]
    outputIds = [stg-ca-def, stg-ca]
    transformers = [{
      type = ScalaCodeSparkDfsTransformer
      code = """
        import org.apache.spark.sql.{DataFrame, SparkSession}
        import org.apache.spark.sql.functions.explode
        (session: SparkSession, options: Map[String,String], dfs: Map[String,DataFrame]) => {
          import session.implicits._
          val df = dfs("ext-ca")
          val df_ca_def = df.withColumn("CADef", explode($"initialLoad.customAttributeDefinitions.customAttributeDefinition")).select("importFile","CADef.*")
          val df_ca = df.withColumn("CA", explode($"initialLoad.customAttributes.customAttribute")).select("importFile","CA.*")
          Map("stg-ca-def" -> df_ca_def, "stg-ca" -> df_ca)
        }
      """
    }]
    metadata {
      feed = TMS-download-ca
    }
  }

  download-TMS-rules {
     type = CopyAction
     inputId = ext-rules
     outputId = stg-rules
     transformer = {
       scalaCode = """
         import org.apache.spark.sql.{DataFrame, SparkSession}
         import org.apache.spark.sql.functions.explode
         (session: SparkSession, options: Map[String,String], df: DataFrame, dataObjectId: String) => {
           import session.implicits._
           df.withColumn("rules", explode($"initialLoad.ruleDefinitions.rules")).select("importFile","rules.*")
         }
       """
     }
     metadata {
       feed = TMS-download-Rules
     }
   }

}
